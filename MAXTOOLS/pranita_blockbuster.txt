
/*
meditMaterials[3].wire = on
max quick render
--delete c 
meditMaterials[3].wire = off



for n in $ do 
(
InstanceMgr.GetInstances n &instances 
sel[sel.count+1] =  instances[1]
)
*/
 
	struct subblockdesc ( blockfilepath , objectname , blocktransform )
 
	global p = [0, 0, 0]
	global np = [0, 0, 0]
	global cam = 0
	global sel = #()
	--global cbox =	Dummy pos:[0,0,0] isSelected:on boxsize: [4,4,4] name:"cbox"
	
	--Box name: "_$_"lengthsegs:1 widthsegs:1 heightsegs:1 length:4 width:4 height:4 mapcoords:on pos:[0,0,0] isSelected:on
	
	
	--global 	cam = Targetcamera fov:45 nearclip:1 farclip:1000 nearrange:0 farrange:1000 mpassEnabled:off mpassRenderPerPass:off pos:[17,6,0] isSelected:on target:(Targetobject transform:(matrix3 [1,0,0] [0,1,0] [0,0,1] [4,24,4]))
	global dir ="up"
	global basenamearray = #()
	global maxbasename = 	#( "C:\\base\\platformtest.max"	, "C:\\base\\pienza_stuff.max","C:\\base\\pienzablocks.max","C:\\base\\blocktest.max","C:\\base\\ldblockset.max"  )
	global colbasename = 	#( "C:\\base\\orientalcolset.max")
	global exportpath = "E:\\alf_rot\\Project_2013\\BlockBuster\\Assets\\PLATFORM\\HIGHTECH\\"
	
	global currentobjectindex = 1 
	global left= point3 0 0 0
	global modulesize  = point3 0 0 0 
	global front = point3 0 0 0	
	global savepos = point3 0 0 0
	global step = 1
	global steptable = #(0.01,0.1,0.5,1.0,1.5,2.0,2.5,3.0,3.5,4.0)	
	global movestepvalue =0.5
	global basenamenumber = 1
	  
	global  subblocksdescarray = #() 
 
	global baseitems = #("ORI blocks")
 
		fn _sel  =
		(
			if $== undefined do return false
			currentselection =#()
			if $ != selection 
				then  
					append currentselection  $
				else 
					currentselection = $
			currentselection
		)
		


	fn getViewDirectionRay =

	(
		local coordSysTM = Inverse(getViewTM())
		local viewDir = -coordSysTM.row1
		local viewPt = coordSysTM.row4
		p=  ray viewPt viewDir
		return normalize ( p.dir) 
		
	)
	
	fn getpos s =
	(
			if s == undefined do return false 
			if s == selection then  
				return s[1].pos 
			else 
				try ( return s.pos  ) catch (return false)
			
	)

	fn getrotation s =
	(
			if s== undefined do return false 
			if s == selection then  
				return s[1].rotation 
			else 
				try ( return s.rotation ) catch (return false)
			
	)

	
	fn setpos s pos =
	(
		if s== undefined do return false 
			if s == selection then  
				for n in s do 
				(
						
						n.pos = pos
					
				)
			else 
				s.pos+= pos
			
	)
	
		fn dorotate sel rotatematrix =
	(
		if sel == undefined do return false 
		if sel != selection do 
		sel=#(sel)	
		
		originalpos= sel[1].pos
		for n in sel  do 
			(
				n.pos-=originalpos
				originaltransform = n.transform --n.rotation as matrix3	
				finaltransform = originaltransform * rotatematrix
				n.transform = finaltransform 
				n.pos+=originalpos
				setuserprop n "transform" n.transform
			)
			getmodelsize $
		
	)
	fn domove s  pos =
	(
				if s == false do return false 
				if s.count < 1 do return false 	
					
				
				
				move s    (  pos  )
				for n in s do 
					setuserprop n "transform" n.transform

	)
	
	
	fn instanciate s =
	(
			
		if s == selection then  
				for n in (_sel()) 	do 
					t= instance  n 
		return t	
		
	)
	
	

		fn getaxis =  
	(
		
		--n = getnodebyname "n"
		xp  = point3  	 1 	0 		0
		xm = point3  	-1 	0 		0
		yp = point3  	 0 	1 		0
		ym = point3  	 0 	-1 	0
		tm = viewport.getTM()
		np = getViewDirectionRay() 
		
		fxp = distance np xp
		fxm= distance np xm 
		fyp = distance np yp 
		fym=distance np ym  
		
		distancetable = #(fxp,fxm,fyp,fym)
		sort distancetable
		case distancetable[1] of 
		
		(
			fxp: 
			(
				left = xp
				front = ym
			)
			fxm:
			(
				left = xm
				front = yp
			)
			fyp:
			(
				left = yp
				front = xp
			)
			fym:
			(
				left = ym
				front = xm
			)
			default : return false
			
			
		)
		
	)

	-- calculate global bbox from selected node and from size 
	fn calcselbboxfromsize  n = 
(
	s = point3 0 0 0 
	xt=#()
	yt=#()
	zt=#()
	if n == selection do 
	for c in n do 
	(
		b = nodeLocalBoundingBox c	
		
	
		xt[xt.count+1]= b[1].x	
		xt[xt.count+1]= b[2].x	
		
		yt[yt.count+1]= b[1].y	
		yt[yt.count+1]= b[2].y	
		
		zt[zt.count+1]= b[1].z	
		zt[zt.count+1]= b[2].z	
	)
	sort xt 
	sort yt
	sort zt 
	s.x= abs ( xt[1] - xt[xt.count] )
	s.y= abs ( yt[1] - yt[yt.count] )
	s.z= abs ( zt[1] - zt[zt.count] )
	return s
)




	
		fn getmodelsize n =
		(
			--if $ == undefined do return false
				
			bb = #( point3 0 0 0 , point3 0 0 0  )
			
			x=0
			y=0
			z=0
			
			if n == selection 
			then 
			(
				size = calcselbboxfromsize n
				--print size 
				x= size.x as integer
				y= size.y as integer
				z= size.z as integer
			)
			else
			( 
				bb= nodeLocalBoundingBox n
				x =   getuserprop n "xbase"
				y =   getuserprop n "ybase"
				z =   getuserprop n "zbase"
			)
			
			-- set size on prop or bbox
				
			if classof x == integer then 	unnamedRollout.xbasespinner.value = x else
			unnamedRollout.xbasespinner.value =  abs( (  bb[2].x  - bb[1].x  ) as integer ) 
			if classof y == integer  then 	unnamedRollout.ybasespinner.value = y else
			unnamedRollout.ybasespinner.value =  abs ( ( bb[2].y  - bb[1].y	)  as integer) 
			if classof z  == integer then 	unnamedRollout.zbasespinner.value = z else
			unnamedRollout.zbasespinner.value =   abs( ( bb[2].z  - bb[1].z	) as integer ) 
			
			--stable = #(modulesize.x,modulesize.y,modulesize.z) 
			--sort stable 
			--print modulesize

				
			
		)
		

	
		 fn SelectCallBack = 
		 (
			 
			 if ( $ == undefined ) do return false 
			 getmodelsize $
			 
			 if (unnamedRollout.selectinstancechk.checked ==true and $ != selection ) do 
			 (
				 max create mode
				 objname = getuserprop $ "fromobjectnamed"
				for nn in $objects do 
					if ( getuserprop nn "fromobjectnamed" == objname) do 
						selectmore nn
				unnamedRollout.selectinstancechk.checked =false
			)
			 
			 
			 
			 for n in ( _sel()) do 
			 if ( ( getuserprop n "coumpoundblock" ) == true ) 
				then 
					(
						unnamedRollout.mergeblockbutton.enabled = false
						unnamedRollout.unmergeblock.enabled = true
					)
				else 
					(
						unnamedRollout.mergeblockbutton.enabled = true 
						unnamedRollout.unmergeblock.enabled = false
					)
		)
			

rollout unnamedRollout "Untitled" width:401 height:479
(
	pickbutton pickblockbutton "pick" pos:[31,126] width:40 height:18
	button centerbutton "" pos:[50,49] width:21 height:20
	button frontbutton "" pos:[50,25] width:21 height:20
	button rightbutton "" pos:[74,48] width:21 height:20
	button backbutton "" pos:[50,73] width:21 height:20
	button leftbutton "" pos:[26,49] width:21 height:20
	button upbutton "" pos:[103,25] width:21 height:20
	button downbutton "" pos:[103,72] width:21 height:20
	button prevobjectbutton "<<" pos:[31,102] width:40 height:20
	button nextobjectbutton ">>" pos:[79,102] width:40 height:20
	button rotatexbutton "x" pos:[34,175] width:21 height:20
	button rotateybutton "y" pos:[66,175] width:21 height:20
	button rotatezbutton "z" pos:[98,175] width:21 height:20
	button duplicatebutton "use" pos:[79,126] width:40 height:18
	spinner xbasespinner "x" pos:[153,25] width:100 height:16 range:[1,100,0] type:#integer 
 
	spinner ybasespinner "y" pos:[153,49] width:100 height:16 range:[1,100,0] type:#integer 
 
	spinner zbasespinner "z" pos:[153,73] width:100 height:16 range:[1,100,0] type:#integer 
 
	GroupBox grp1 "block size" pos:[137,7] width:127 height:141
	button setmodulesizebutton "set custom size" pos:[151,103] width:101 height:18
	button removecustomsizebutton "remove custom size" pos:[151,125] width:101 height:18
	button stepmovebutton "" pos:[277,103] width:95 height:18
	button movefrontbutton "" pos:[302,26] width:21 height:20
	button moverightbutton "" pos:[326,50] width:21 height:20
	button movebackbutton "" pos:[302,74] width:21 height:20
	button moveleftbutton "" pos:[278,50] width:21 height:20
	GroupBox grp5 "move selection" pos:[269,7] width:112 height:141
	GroupBox grp6 "rotate selection" pos:[21,153] width:112 height:58
	GroupBox grp7 "move" pos:[21,8] width:112 height:141
	button moveupbutton "" pos:[351,26] width:21 height:20
	button movedownbutton "" pos:[351,73] width:21 height:20
	GroupBox grp40 "blocks base" pos:[138,153] width:243 height:91
	button mergeblockbutton "merge blocks" pos:[152,172] width:101 height:18 enabled:false
	dropdownList baseselddlist "active base" pos:[269,164] width:103 height:40 items:#("LA block set", "pienzastuff", "pienzablocks", "racingblocks", "ldblockset")
	button setpropbutton "set block prop" pos:[149,265] width:101 height:18
	dropdownList propddlist "" pos:[261,263] width:103 height:21 items:#("ldblock", "lablock") selection:2
	checkbox ldlayerchkbox "level design layer" pos:[36,230] width:84 height:28 checked:true
	GroupBox grp16 "layers" pos:[21,217] width:112 height:77
	checkbox lalayerchkbox "level art layer" pos:[35,259] width:84 height:28 checked:true
	button resetblocktransformbutton "reset" pos:[277,125] width:95 height:18
	button debugbutton "isolate reference block" pos:[260,217] width:115 height:18
	button unmergeblock "split" pos:[153,194] width:100 height:18
	checkbox selectinstancechk "selectinstanecs" pos:[151,214] width:98 height:23 checked:false
	button generateblocksfromtextfile "generate" pos:[170,436] width:96 height:18
	edittext listname "" pos:[24,312] width:135 height:136
	
	dropdownList nmmapddl "" pos:[167,309] width:103 height:21 items:#("GDA1", "GDA2", "GAF1", "GAF2")
	dropdownList nmtypeddl "" pos:[168,336] width:103 height:21 items:#("BUILD", "VEG", "PROP", "DECO", "PLUG", "ETC")
	edittext nmxed "" pos:[166,361] width:27 height:20
	edittext nmyed "" pos:[198,361] width:27 height:20
	edittext nmzed "" pos:[230,361] width:27 height:20
	dropdownList iterddl "" pos:[167,388] width:45 height:21 items:#("01", "02", "03", "04", "05", "06")
	dropdownList iterletterddl "" pos:[223,388] width:45 height:21 items:#("A", "B", "C", "D", "E", "F", "G", "H", "I", "J")
	button addnamebutton "add" pos:[170,415] width:96 height:18
	
	
	
	GroupBox grp17 "generate name and shapes" pos:[21,296] width:259 height:168
	GroupBox grp8 "blocks type for layer" pos:[138,246] width:243 height:48
	button gencolbutton "gen col" pos:[295,312] width:81 height:18
	
	
	button batchexport "BATCH EXPORT" pos:[298,348] width:80 height:21 --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	
	

		fn dotnetwritefile   str =
		(
			start = timeStamp()
	
		
			
		)

	
		fn generateassetlist  =
		(
			
			if  ( doesfileexist ( exportpath+"AssetList.xml" ))  then
				(
					fstr= openfile 	( exportpath+"AssetList.xml" ) mode:"w+"
					print "file exist open "
				)
			else 	
				fstr = 	createFile ( exportpath+"AssetList.xml" ) 

			str = "<AssetsList>\n"
			format ( str ) to:  fstr
			arr = getfiles ( exportpath+"*.fbx" ) 
			for n in arr do 
			(
				str = "	<name>" + getfilenamefile n + "</name>\n"  
				format ( str ) to:  fstr
			)
			str = "</AssetsList>\n"
			format ( str ) to:  fstr
			
			dest = exportpath+"UassetList.xml"
			
			
			--local contents = (dotNetClass "System.IO.File").ReadAllLines ( exportpath+"AssetList.xml" ) 

			
			
		--( dotNetClass "System.IO.File" ).AppendAllLines dest  str 
			
			flush fstr
			close fstr 
			print "closed"
			
			
			
			--Ucopyfile   ( exportpath+"AssetList.xml" ) ( exportpath+"UAssetList.xml" ) 
			
			
		)	
		
	on batchexport pressed do
	
	(
		count = 0 
		
		if ( $ == undefined ) do
		(	
			generateassetlist() 
			
			return false
		)
		currentselection =#()
		if $ != selection 
			then  
				append currentselection  $
			else 
			for n in $ do 
				append currentselection  n
		
		if  currentselection.count  == 0 do  
		
		(
			messagebox ( "nothing selected generate asset list anyway .. " )
			generateassetlist ()
			return  false 
		)
		theClasses =exporterPlugin.classes
		theClasses[9]
		bkpos = [0,0,0]
	
		if ( exportpath == "" ) 
			do 
				exportpath = getSavePath  "were is the unity repository for exported files "
		
		
		for it in (currentselection) do 
		(
			clearSelection()
			select it 
			bkpos = it.pos
			it.pos = [0,0,0] 
			exportFile (exportpath +"\\"+ it.name + ".fbx")   selectedonly:true  using: theClasses[9]
			it.pos = bkpos 
		)

		generateassetlist ()
		
		
		)

	
	
	on unnamedRollout open do
	(
		callbacks.addScript #selectionSetChanged "SelectCallBack()"
		stepmovebutton.caption = ( steptable[step] as string ) 
		basenamearray = getMAXFileObjectNames  maxbasename[1]
	
	)
	on unnamedRollout close do
	(
		callbacks.removescripts #selectionSetChanged 
		
		if $== undefined do return false 
		try ( delete cbox ) catch ()
		max unhide all
		
	)
	on pickblockbutton picked obj do
	(
		if $== undefined do return false 
		
		b = getuserpropbuffer obj
		
		sel = $
		
		for it in (sel) do 
		(
			trs = it.transform
			--delete it
			
			n =  instance obj 
			n.transform=trs
			--select n
			setuserpropbuffer n b
			setuserprop n "transform" n.transform
		)
		
		delete sel
	)
	on centerbutton pressed do
	(
		if $== undefined do return false 
		for n in (_sel() )do 
			(		
					buftext= getUserPropBuffer n
					inst = instance n
					setUserPropBuffer inst buftext
					setuserprop n "transform" n.transform
			)
	)
	on frontbutton pressed do
	( 
		getaxis()
		domove (_sel())  ( point3 (front.x*xbasespinner.value) (front.y*ybasespinner.value) 0 )
	)
	on rightbutton pressed do
	(	
		getaxis()
		domove (_sel())  ( point3 (-left.x*xbasespinner.value) (-left.y*ybasespinner.value) 0 )
	)
	on backbutton pressed do
	(		
		getaxis()
		domove (_sel())  ( point3 (-front.x*xbasespinner.value) (-front.y*ybasespinner.value) 0 )
	)
	on leftbutton pressed do
	(
		getaxis() -- retunr axis normalized vector 
		domove (_sel())  ( point3 (left.x*xbasespinner.value) (left.y*ybasespinner.value) 0 )
	)
	on upbutton pressed do
	(
		domove (_sel())  ( point3 0 0 (1* zbasespinner.value ) ) 
	)
	on downbutton pressed do
	(
		domove (_sel())  ( point3 0 0 (-1* zbasespinner.value ) ) 
	)
	on prevobjectbutton pressed do
	(
		currentobjectindex  -=1
		currentobjectindex  = ( mod  currentobjectindex basenamearray.count ) 
		if currentobjectindex <1 do currentobjectindex =basenamearray.count
		m = mergemaxfile maxbasename[basenamenumber] #(basenamearray[currentobjectindex]) #useSceneMtlDups #skipDups 
		m= getnodebyname  basenamearray[currentobjectindex]
		if ( getrotation $ != false ) do 
			m.rotation = getrotation $
		if ( getpos $ == false ) 
		then 
			m.pos = savepos 
		else 
			m.pos = getpos $ 
		if ( $ != undefined ) do 
			delete $ 
		select #(m)
		
		setuserprop $ "frombasefile" maxbasename[basenamenumber] 
		setuserprop $ "fromobjectnamed" basenamearray[currentobjectindex]
		setuserprop $ "transform" $.transform
		
	)
	on nextobjectbutton pressed do
	(
		--currentobjectindex  +=1
		s = _sel()
		currentobjectindex  = ( mod  currentobjectindex basenamearray.count )  +1
		m = mergemaxfile maxbasename[basenamenumber] #(basenamearray[currentobjectindex]) #useSceneMtlDups #skipDups 
		m= getnodebyname  basenamearray[currentobjectindex]
		if ( getrotation $ != false ) do 
			m.rotation = getrotation $
		if ( getpos $ == false ) 
		then 
			m.pos = savepos 
		else 	
			m.pos = getpos $
		
		if ( $ != undefined ) do 
					delete $ 
		
		select m
		
		
		
		setuserprop $ "frombasefile" maxbasename[basenamenumber] 
		setuserprop $ "fromobjectnamed" basenamearray[currentobjectindex]
		setuserprop $ "transform" $.transform
		
	)
	on rotatexbutton pressed do
	(
		dorotate $  (rotateXMatrix 45) 
		
	)
	on rotateybutton pressed do
	(
		dorotate $  (rotateYMatrix 45 ) 
		
	)
	on rotatezbutton pressed do
	(
		dorotate $  (rotateZMatrix 45 ) 
		
	)
	on duplicatebutton pressed do
	(
		
		try ( 
			select $
			savepos = $.pos 
			) catch (messagebox "no selection")
	)
	on setmodulesizebutton pressed do
	(
		if $==undefined do return false
		
		if $ == selection 
		then  
				messagebox "canot set custom value on multiple block"
		else 
			(
				setuserprop $ "xbase" xbasespinner.value
				setuserprop $ "ybase" ybasespinner.value
				setuserprop $ "zbase" zbasespinner.value
			)
	)
	on removecustomsizebutton pressed do
	(
		if $==undefined do return false
		
		
		for n in (_sel())  do  
			(
				setuserprop n "xbase" undefined
				setuserprop n "ybase" undefined
				setuserprop n "zbase" undefined
			)
			
	
	)
	on stepmovebutton pressed do
	(
		step+=1
		i =  ( mod    step steptable.count ) +1
		stepmovebutton.caption = ( steptable[i] as string ) 
		movestepvalue = steptable[i]
	)
	on movefrontbutton pressed do
	( 
		getaxis() 
		domove (_sel()) (point3 (front.x*movestepvalue )  (front.y*movestepvalue)  0) 
	)
	on moverightbutton pressed do
	(	
		getaxis() 
		domove (_sel()) (point3 (-left.x*movestepvalue )  (-left.y*movestepvalue)  0) 
	)
	on movebackbutton pressed do
	(		
		getaxis() 
		domove (_sel()) (point3 (-front.x*movestepvalue )  (-front.y*movestepvalue)  0) 
	)
	on moveleftbutton pressed do
	(
		getaxis() 
		domove (_sel()) (point3 (left.x*movestepvalue )  (left.y*movestepvalue)  0) 
	)
	on moveupbutton pressed do
	(
		getaxis() 
		domove (_sel()) (point3 0 0 1*movestepvalue)
	)
	on movedownbutton pressed do
	(
		getaxis() 
		domove (_sel()) (point3 0 0 -1*movestepvalue	 ) 
	)
	on mergeblockbutton pressed do
	(
		
	  if ( $ == undefined or $!=selection  ) do return false 	
	  newset=#()	
	  sel =#()
		-- get all sub component 
	  subblocktextbuffer = ""
	 
		  for n in $ do -- remove ld block from selection 
			  
		 if   (( getuserprop n "blocktype" )   == "lablock"  )
			do 
			(
				convertTo n editable_mesh
				sel[sel.count+1]=n
			)
	
		  rootmesh = sel [1]
			
	  for n in sel
			do 
			(
				
				s= getuserprop  n "frombasefile"
				if s != undefined do 
					subblocktextbuffer+= ( s +"@" )
				
				s= getuserprop  n "fromobjectnamed"
				if s != undefined do 
					subblocktextbuffer+= ( s +"@" )
				
				s= ( n.transform * (inverse  rootmesh.transform) ) as string
				subblocktextbuffer+= ( s +"@" )
				
				s= getuserprop n "coumpoundblock"	
				if s == "true" do 
					subblocktextbuffer+= ( ( getuserprop n "subblocks" ) +"@" )
				
				
			)
	
	
	
	  for c=2 to sel.count do 
		 meshop.attach rootmesh sel[c]  condenseMat:true deleteSourceNode:true
	  
	  select rootmesh
	  
	  setuserprop $ "subblocks" subblocktextbuffer
	  setuserprop $ "coumpoundblock" true
	  setuserprop $ "transform" $.transform
	  
	  setuserprop $ "frombasefile"   undefined 
		setuserprop $ "fromobjectnamed"  (rootmesh.name+"_coumpound")
	  
	  
	)
	on baseselddlist selected sel do
	(	
		-- change base and refresh block list
		basenamenumber = sel
		basenamearray = getMAXFileObjectNames  maxbasename[basenamenumber]
	)
	on setpropbutton pressed do
	(
		if $==undefined do return false
		if $ == selection then 
			for n in $ do 
				setuserprop n "blocktype" propddlist.items[propddlist.selection]
		else 		
				setuserprop n "blocktype" propddlist.items[propddlist.selection]
	)
	on propddlist selected sel do
		(	
	
	)
	on ldlayerchkbox changed state do
	(
		--unhide objects
		
		for n in $objects do 
		(
			case state of 
			(
				true: if ( getuserprop n "blocktype" == "ldblock" ) do unhide n
				
				false: if ( getuserprop n "blocktype" == "ldblock" ) do hide n
				
				
			)
			
		)
		
	)
	on lalayerchkbox changed state do
	(
			for n in $objects do 
		(
			case state of 
			(
				true: if ( getuserprop n "blocktype" == "lablock" ) do unhide n
				false: if ( getuserprop n "blocktype" == "lablock" ) do hide n
			)
		)
	)
	on resetblocktransformbutton pressed do
	(
		if $==undefined do return false 
			
		for n in (_sel()) do 
			try ( n.transform = ( execute ( getuserprop n "transform" 	) ) ) catch ()
	)
	on debugbutton pressed do
	(
			s=#()
			for n in $ do 
			(
			InstanceMgr.GetInstances n &instances 
			s[s.count+1] =  instances[1]
			)
			
			select s
			
	)
	on unmergeblock pressed do
	(
		if $ == undefined do return false 
		
			
		memsel = $
			
		
		
		--for iter in (_sel()) do 	
		--(
			
			
				subblocksdescarray = #() 
				
				subblockstring = getuserprop memsel "subblocks" 
				print subblockstring 
			
				buf = filterString subblockstring "@"
				--print buf 
				
				--struct subblockdesc ( blockfilepath , objectname , blocktransform )
				
				for c = 1 to (buf.count) by 3  do
				(	
					desc = subblockdesc()
					desc.blockfilepath= buf[c]
					desc.objectname = buf[c+1]
					desc.blocktransform= buf[c+2]
					subblocksdescarray[subblocksdescarray.count+1]= desc
				)
				
				for n in subblocksdescarray do 
				try(
						mergemaxfile n.blockfilepath #(n.objectname) #useSceneMtlDups #mergeDups 
						m=getnodebyname n.objectname 
						 inst  =  instance  m 
					
					
						buftext= getUserPropBuffer m
						setUserPropBuffer inst buftext 
						
						-- validate block id 
						setuserprop inst "frombasefile" n.blockfilepath
						setuserprop inst "fromobjectnamed" n.objectname
				
					
						delete m
					
						mtrx = execute n.blocktransform 
						
				
								inst.transform =    mtrx   
								setuserprop inst "transform" inst.transform
								selectmore inst
						
						
				)catch()
		--)
		
		recal = execute ( getuserprop memsel "transform" ) 
		
		delete memsel
		
		for n in (_sel()) do 
		(
			--rotate n recal.rotationpart 
			n.transform =  n.transform  * recal 
		)
	
	)
	on selectinstancechk changed state do
		(
	
	)
	on generateblocksfromtextfile pressed do
	(
			blocksetname = getsavefilename()
		
			--textfilestream = openfile  (blocksetname ) mode:"r"
			textfilestream = listname.text as stringstream
		
			creatednodes = #()
		
		
			while not eof textfilestream do 
			(
					objname =   readline textfilestream 
					
					if objname =="" do return false
					--print objname 
					
					parsenamearray = filterstring objname "_"
					size = ""
					--catchsize = 0
					c= 1
					while ( classof size == string  or c < parsenamearray.count )   do 
					(
						currentstring = parsenamearray[c] 
						size = currentstring as integer
						if classof size == integer do  
							( --catchsize = size 
								c=parsenamearray.count 
							)
						c+=1
					)
					
					s= ( size as string ) as stringstream 
					
					--read x 
					
					x =(readchar s)
					y= (readchar s)
					z= (readchar s) 
					if ( not eof s ) do 
						if ( z == "1" ) do z+=readchar s
					
					x = x as integer 
					y = y as integer 
					z = z as integer 
					b= Box lengthsegs:1 widthsegs:1 heightsegs:1 length:x  width:y  height:z mapcoords:on pos:[0,0,0] isSelected:on  name:objname
					setuserprop b "blocktype" "lablock"
					append creatednodes b  
			)
			
					pthname = getfilenamepath blocksetname 
					fname = getfilenamefile blocksetname
					maxname = (pthname+fname+".max"	) 
					savenodes creatednodes maxname
					maxbasename[maxbasename.count+1]=maxname
					gotcha = false 
					for n in baseitems do 
					(
						if n==maxname do gotcha = true
					)
					if (not gotcha ) do  
					(
						arr = baseselddlist.items
						append arr fname 
						baseselddlist.items = arr
					)
				
					
	)
	on addnamebutton pressed do
	(
	
		newname = "ACFE_"+nmmapddl.selected+"_"+nmtypeddl.selected+"_"+nmxed.text+nmyed.text+nmzed.text+"_" +iterddl.selected+"_"+iterletterddl.selected+"\n"
		listname.text+=newname
	
	)
	on gencolbutton pressed do
	(
		if $ == undefined do return false 
			
		c=0
		
		for n in (_sel()) do 
			(
				
					
				if (	getuserprop n "coumpoundblock" == true  ) do return false -- deal with merged block 
				
					colname =  (getuserprop n "fromobjectnamed") + "_COL" 
					mergemaxfile colbasename[basenamenumber] #( colname )#useSceneMtlDups #skipDups 
					col = getnodebyname	colname 
					col.name+= ( c as string ) 
					c+=1
					print colbasename[basenamenumber] 
					print colname
					col.transform = n.transform
					setuserprop col "transform" tr 
					setuserprop col  "frombasefile"  colbasename[basenamenumber] 
					setuserprop col  "fromobjectnamed"  colname
				
			)	
		
	)

)

createdialog unnamedRollout



text edited

caca
pipi popo
